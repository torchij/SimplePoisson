list.files()
library(shiny)
install.packages('shiny')
library(ggplot2)#
library(reshape)
# Illumina vs Ultima#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare3.txt"#
#
df <- read.delim(df_file, header=TRUE)#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "NextSeq"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)#
library(reshape)
# Illumina vs Ultima#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare3.txt"#
#
df <- read.delim(df_file, header=TRUE)#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "NextSeq"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_melt, aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
df_melt
head(df_melt)
ggplot(subset(df_melt, tech != "NextSeq" & sample != "Control-1" & sample != "Control-2"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(df_melt, tech != "NextSeq" & sample != "Control-1"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(df_melt, sample != "Control-1"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(subset(df_melt, sample != "Control-1" & sample != "NSC-2" & sample != "IPS-2"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare3.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "Miseq" & tech != "ElementBio" & sample != "Control-2" & sample != "NSC-2" & sample != "IPS-1"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)#
library(reshape)
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare3.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "Miseq" & tech != "ElementBio" & sample != "Control-2" & sample != "NSC-2" & sample != "IPS-1"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)#
library(reshape)
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare4.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare4.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "Miseq" & tech != "ElementBio" & run != "run2", aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
)
ggplot(subset(df_melt, tech != "Miseq" & tech != "ElementBio" & run != "run2"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/Ultima/compare4.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)#
#
ggplot(subset(df_melt, tech != "Miseq" & tech != "ElementBio" & run != "run2"), aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
poisson.test(137, 24.19893)
require(graphics)
-log(dpois(0:7, lambda = 1) * gamma(1+ 0:7))
Ni <- rpois(50, lambda = 4); table(factor(Ni, 0:max(Ni)))
Ni
1 - ppois(10*(15:25), lambda = 100)
ppois(10*(15:25), lambda = 100, lower.tail = FALSE)
par(mfrow = c(2, 1))#
x <- seq(-0.01, 5, 0.01)#
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")#
plot(x, pbinom(x, 100, 0.01), type = "s", ylab = "F(x)",#
     main = "Binomial(100, 0.01) CDF")
?ppois
ppois(4, 1)
ppois(0:100, 1)
dpois(3, 1)
x.poi<-rpois(n=200,lambda=2.5)
hist(x.poi,main="Poisson distribution")
lambda.est <- mean(x.poi)
table(x.poi)
(tab.os<-table(x.poi))
tab.os
freq.os<-vector()#
for(i in 1: length(tab.os)) freq.os[i]<-tab.os[[i]]
freq.ex<-(dpois(0:max(x.poi),lambda=lambda.est)*200)
x.poi
mean(x.poi)
(tab.os<-table(x.poi))
for(i in 1: length(tab.os)) freq.os[i]<-tab.os[[i]]
freq.ex<-(dpois(0:max(x.poi),lambda=lambda.est)*200)
acc <- mean(abs(freq.os-trunc(freq.ex))) ## absolute goodness of fit index acc#
acc/mean(freq.os)*100 ## relative (percent) goodness of fit index
h <- hist(x.poi ,breaks=length(tab.os))#
xhist <- c(min(h$breaks),h$breaks)#
yhist <- c(0,h$density,0)#
xfit <- min(x.poi):max(x.poi)#
yfit <- dpois(xfit,lambda=lambda.est)#
plot(xhist,yhist,type="s",ylim=c(0,max(yhist,yfit)), main="Poison density and histogram")#
lines(xfit,yfit, col="red")
library(vcd) ## loading vcd package
install.packages("vcd")
library(vcd) ## loading vcd package
x.poi
gf <- goodfit(x.poi,type= "poisson",method= "MinChisq")
summary(gf)
plot(gf,main="Count data vs Poisson distribution")
df_file <- "/Users/jtorchia/OneDrive - ERS/hcc1187/hcc1187_filtered.nsorted.tloc.bam.coverage"#
#
df <- read.delim(df_file, header=FALSE)
head(df)
gf <- goodfit(df$V7, type="poisson",method="MinChisq")
plot(gf,main="Count data vs Poisson distribution")
?goodfit
dummy <- rnbinom(200, size = 1.5, prob = 0.8)
gf <- goodfit(dummy, type = "nbinomial", method = "MinChisq")
dummy
gf <- goodfit(df$V7, type="poisson",method="MinChisq")
dummy <- rnbinom(200, size = 1.5, prob = 0.8)#
gf <- goodfit(dummy, type = "nbinomial", method = "MinChisq")#
summary(gf)#
plot(gf)
gf
data("HorseKicks")#
HK.fit <- goodfit(HorseKicks)#
summary(HK.fit)#
plot(HK.fit)
gf <- goodfit(df$V7, type="poisson",method="MinChisq")#
summary(gf)#
plot(gf)
df$V7
# goodness of fit test#
gf <- goodfit(round(df$V7), type="poisson",method="MinChisq")#
summary(gf)#
plot(gf)
plot(df$V7)
plot(dummy)
plot(round(df$V7))
plot(hist(round(df$V7)))
library(cn.mops)
library(rtracklayer)#
library(seqbias)#
library(cn.mops)#
#library(vcd)#
#
# inputs#
hg38_bed_file <- "/Users/jtorchia/OneDrive - ERS/hcc1187/hg38.canonical.chrom.sizes.0based.bed"#
targ_bed_file <- "/Users/jtorchia/OneDrive - ERS/hcc1187/SV_probes_v.b.0.1.annotated.bed"#
bam_file <- "/Users/jtorchia/OneDrive - ERS/hcc1187/test.bam"#
#
#hg38_bed_file <- "/mnt/ebs/jon/hcc1187/hg38.canonical.chrom.sizes.0based.bed"#
#targ_bed_file <- "/mnt/ebs/jon/hcc1187/SV_probes_v.b.0.1.annotated.bed"#
#bam_file <- "/mnt/ebs/jon/hcc1187/downsample/bam/hcc1187_0.0625.bam"#
#
###################################################
##### Step 1: Estimate lambda from bam file) ######
###################################################
#
# read in hg38 intervals (canonical)#
gr_hg38 <- import(hg38_bed_file)#
#
# get read counts from bam file#
gr1 <- getReadCountsFromBAM(bam_file, sampleNames="testSample", WL=1000, parallel=2)
gr1
gr1$testSample
?sample
gr1
gr1_samp <- sample(gr1, size=100)
gr1_samp <- sample(gr1$testSample, size=100)
gr1_samp
mean(gr1_samp)
sample(gr1$testSample, size=100)
# set sampling interval length, number of intervals, and replicate number#
 num_interval <- 1000#
 num_basepair <- 1000#
num_replicate <- 10#
interval_size <- num_basepair * num_interval#
#
### testing#
# sample n rows from granges ojbect#
gr1_samp <- replicate(num_replicate, sample(gr1$testSample, size=100))
gr1_samp
gr1_samp <- replicate(num_replicate, sum(sample(gr1$testSample, size=100)))
gr1_samp
mean(gr1_samp)
mean(gr1_samp) / interval_size
# sample read counts#
counts_sum <- replicate(num_replicate, sum(subsetByOverlaps(gr1, random.intervals(gr_hg38, n=num_interval, ms=num_basepair))$testSample))#
#
# estimate lambda#
counts_avg <- mean(counts_sum)#
counts_std <- sd(counts_sum)#
lambda <- counts_avg / interval_size#
lambda
install.packages("remotes")
remotes::install_github("giocomai/ganttrify")
library(ganttrify)
test_36 <- ganttrify::test_project#
test_36[11,4] <- 36#
#
ganttrify(project = test_36,#
          project_start_date = "2021-04", #
          month_breaks = 3,#
          show_vertical_lines = FALSE)
ganttrify(project = ganttrify::test_project,#
          hide_wp = TRUE,#
          font_family = "Roboto Condensed")
test_36 <- ganttrify::test_project#
test_36[11,4] <- 36#
#
ganttrify(project = test_36,#
          project_start_date = "2021-04", #
          month_breaks = 3,#
          show_vertical_lines = FALSE)
getwd()
df_file <- "/Users/jtorchia/Desktop/gantt_example.txt"#
#
df <- read.delim(df_file)
df
library(tidyrverse)
ganttrify(project=df)
ganttrify(project=df,#
          project_start_date = "2021-03",#
          font_family = "Roboto Condensed")
ganttrify::test_project
install.packages('tidyrverse')
install.packages('tidyverse')
library(tidyverse)
tb <- as_tibble(read.delim(df_file))
tb
ganttrify::test_project
ganttrify(project=tb,#
          project_start_date = "2022-08",#
          font_family = "Roboto Condensed")
ganttrify(project = ganttrify::test_project,#
          spots = ganttrify::test_spots,#
          project_start_date = "2021-03",#
          size_text_relative = 1.2, #
          mark_quarters = TRUE,#
          font_family = "Roboto Condensed")
ganttrify(project = ganttrify::test_project,#
          project_start_date = "2021-03",#
          font_family = "Roboto Condensed")
library("ganttrify")#
#
ganttrify(project = ganttrify::test_project,#
          project_start_date = "2021-03",#
          font_family = "Roboto Condensed")
ganttrify(project = ganttrify::test_project,#
          project_start_date = "2021-03",#
          font_family = "Roboto Condensed")
library(ggplot2)#
library(reshape)
# plot relative stats#
df_file <- "/Users/jtorchia/OneDrive - ERS/tech-comparison/V1_vs_V2/compare.txt"#
#
df <- read.delim(df_file, header=TRUE)#
#
df_melt <- melt(df)#
#
ggplot(df_melt, aes(fill=tech, y=value, x=variable)) + #
    geom_bar(position="dodge", stat="identity") +#
    facet_wrap(~sample) +#
    theme_bw() +#
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
df
colnames(df)
library(data.table)
setwd("/Users/jtorchia/git/torchij/SimplePoisson/")
bed_file <- "test.bed"
setwd("/Users/jtorchia/git/torchij/SimplePoisson/")#
bed_file <- "test.bed"#
cmd <- "bedtools multicov -bams test.bam -bed test.bed"#
df <- fread(cmd)
head(df)
df <- fread(cmd=cmd)
head(df)
colnames(df) <- c("chrom", "start", "end", "tloc", "score", "strand", "counts")
head(df)
df$size <- df$end - df$start
df_agg <- aggregate(cbind(counts, size) ~ tloc, data = df, FUN = sum, na.rm = TRUE)
df_agg$counts_kb <- df_agg$counts / df_agg$size * 1000
df_agg
cmd
bed_file
bam_file
bam_file <- "test.bam"
paste0("bedtools multicov -bams ", bam_file, " -bed ", bed_file)
cmd <- paste0("bedtools multicov -bams ", bam_file, " -bed ", bed_file)#
df <- fread(cmd=cmd)
df
?fread
.libPaths()
